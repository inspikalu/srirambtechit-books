
User_dtls
Exam_dtls
Course_Dtls
3's Mapping

TODO:
Loop detected at data conversion layer 

Business Modules:-

1. Registeration - 
	Save details
	Check already registered user
	Redirect to LoginPage

2. Login - 
	Fetch user details
	Validate to decide sucesss or fail
	Redirect to instructionPage

3. Instruction:-
	Fetch exam details when hit take test
	Start coundown timer
	
	
	
	
	CREATE TABLE aptikraft.user_course_mapping_dtls (
   id INT(11) AUTO_INCREMENT NOT NULL,
   course_id INT(11) NOT NULL,
   user_id INT(11) NOT NULL,
  CONSTRAINT cemd_course_dtls_id_fk FOREIGN KEY (course_id) REFERENCES aptikraft.course_dtls (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
  CONSTRAINT ucmd_user_dtls_id_fk FOREIGN KEY (user_id) REFERENCES aptikraft.user_dtls (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
  PRIMARY KEY (id)
) ENGINE = innodb ROW_FORMAT = DEFAULT;
	



2.4.2. Session-per-request pattern

This is the most common transaction pattern. The term request here relates to the concept of a system that reacts to a series of requests from a client/user. Web applications are a prime example of this type of system, though certainly not the only one. At the beginning of handling such a request, the application opens a Hibernate Session, starts a transaction, performs all data related work, ends the transaction and closes the Session. The crux of the pattern is the one-to-one relationship between the transaction and the Session.

Within this pattern there is a common technique of defining a current session to simplify the need of passing this Session around to all the application components that may need access to it. Hibernate provides support for this technique through the getCurrentSession method of the SessionFactory. The concept of a "current" session has to have a scope that defines the bounds in which the notion of "current" is valid. This is purpose of the org.hibernate.context.spi.CurrentSessionContext contract. There are 2 reliable defining scopes:



    First is a JTA transaction because it allows a callback hook to know when it is ending which gives Hibernate a chance to close the Session and clean up. This is represented by the 
	
	org.hibernate.context.internal.JTASessionContext 
	
	implementation of the org.hibernate.context.spi.CurrentSessionContext contract. Using this implementation, a Session will be opened the first time getCurrentSession is called within that transaction.

	
	
    Secondly is this application request cycle itself. This is best represented with the 
	
	org.hibernate.context.internal.ManagedSessionContext 
		
	implementation of the org.hibernate.context.spi.CurrentSessionContext contract. Here an external component is responsible for managing the lifecycle and scoping of a "current" session. At the start of such a scope, ManagedSessionContext's bind method is called passing in the Session. At the end, its unbind method is called.

	
	
	
    Some common examples of such "external components" include:

        javax.servlet.Filter implementation

        AOP interceptor with a pointcut on the service methods

        A proxy/interception container
